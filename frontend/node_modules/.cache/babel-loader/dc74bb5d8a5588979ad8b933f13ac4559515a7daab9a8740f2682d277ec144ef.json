{"ast":null,"code":"var _jsxFileName = \"/Users/amritanandsinghgmail.com/Desktop/GitHub/Paradoma Tracker/frontend/src/elements/quote.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RandomQuote = () => {\n  _s();\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const fetchRandomQuote = async () => {\n    try {\n      const response = await fetch('https://api.quotable.io/random');\n      const data = await response.json();\n      setQuote(data.content);\n      setAuthor(data.author);\n    } catch (error) {\n      console.error('Error fetching random quote:', error);\n    }\n  };\n  useEffect(() => {\n    fetchRandomQuote();\n  }, []); // The empty dependency array ensures the effect runs only once on mount\n\n  const handleRefreshClick = () => {\n    fetchRandomQuote();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"blockquote\", {\n      className: \"blockquote\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-3\",\n        children: quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"blockquote-footer\",\n        children: [\"- \", author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleRefreshClick,\n      children: \"Refresh Quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(RandomQuote, \"uAT/nb434hxg5DOW/0KtafH4Yrk=\");\n_c = RandomQuote;\nexport default RandomQuote;\nvar _c;\n$RefreshReg$(_c, \"RandomQuote\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RandomQuote","_s","quote","setQuote","author","setAuthor","fetchRandomQuote","response","fetch","data","json","content","error","console","handleRefreshClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/amritanandsinghgmail.com/Desktop/GitHub/Paradoma Tracker/frontend/src/elements/quote.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst RandomQuote = () => {\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n\n  const fetchRandomQuote = async () => {\n    try {\n      const response = await fetch('https://api.quotable.io/random');\n      const data = await response.json();\n\n      setQuote(data.content);\n      setAuthor(data.author);\n    } catch (error) {\n      console.error('Error fetching random quote:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchRandomQuote();\n  }, []); // The empty dependency array ensures the effect runs only once on mount\n\n  const handleRefreshClick = () => {\n    fetchRandomQuote();\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <blockquote className=\"blockquote\">\n        <p className=\"mb-3\">{quote}</p>\n        <footer className=\"blockquote-footer\">- {author}</footer>\n      </blockquote>\n      <button className=\"btn btn-primary\" onClick={handleRefreshClick}>\n        Refresh Quote\n      </button>\n    </div>\n  );\n};\n\nexport default RandomQuote;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMU,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;MAC9D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElCP,QAAQ,CAACM,IAAI,CAACE,OAAO,CAAC;MACtBN,SAAS,CAACI,IAAI,CAACL,MAAM,CAAC;IACxB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAEDf,SAAS,CAAC,MAAM;IACdS,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;IAC/BR,gBAAgB,CAAC,CAAC;EACpB,CAAC;EAED,oBACEP,OAAA;IAAKgB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BjB,OAAA;MAAYgB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAChCjB,OAAA;QAAGgB,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAEd;MAAK;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/BrB,OAAA;QAAQgB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,GAAC,IAAE,EAACZ,MAAM;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACbrB,OAAA;MAAQgB,SAAS,EAAC,iBAAiB;MAACM,OAAO,EAAEP,kBAAmB;MAAAE,QAAA,EAAC;IAEjE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACnB,EAAA,CAnCID,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAqCjB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}