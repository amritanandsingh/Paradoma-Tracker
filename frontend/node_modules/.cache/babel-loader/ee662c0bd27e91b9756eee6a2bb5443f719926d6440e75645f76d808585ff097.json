{"ast":null,"code":"var _jsxFileName = \"/Users/amritanandsinghgmail.com/Desktop/GitHub/Paradoma Tracker/frontend/src/components/stopwatch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stopwatch = () => {\n  _s();\n  const [seconds, setSeconds] = useState(1500); // Initial time for focus (25 minutes in seconds)\n  const [isActive, setIsActive] = useState(false);\n  const [timerType, setTimerType] = useState('Focus');\n  const [count, setCount] = useState(); // Variable to count completed cycles\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(process.env.REACT_APP_GET_COUNT_API);\n      setCount(response.data.data.count);\n\n      // Assuming you want to initialize the timer based on the fetched count\n      setSeconds(prevSeconds => timerType === 'Focus' ? 300 : 1500);\n    } catch (error) {\n      console.error('Error fetching initial data:', error);\n    }\n  };\n  useEffect(() => {\n    // Call fetchData once when the component mounts\n    fetchData();\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  useEffect(() => {\n    let interval;\n    if (isActive && seconds > 0) {\n      interval = setInterval(() => {\n        setSeconds(prevSeconds => prevSeconds - 1);\n      }, 1000);\n    } else if (seconds === 0) {\n      clearInterval(interval);\n      handleCompletion();\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds, timerType]);\n  useEffect(() => {\n    if (count > 0) {\n      fetchData();\n    }\n  }, [count]);\n  const handleCompletion = () => {\n    setIsActive(false);\n    setCount(prevCount => prevCount + 1);\n\n    // Toggle between Focus and Break\n    setTimerType(prevType => prevType === 'Focus' ? 'Break' : 'Focus');\n\n    // Set the next timer duration based on the type\n    setSeconds(prevSeconds => timerType === 'Focus' ? 300 : 1500);\n  };\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const remainingSeconds = time % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n  };\n  const toggleTimer = () => {\n    setIsActive(!isActive);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"display-4\",\n      children: \"Stopwatch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"display-2\",\n      children: formatTime(seconds)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [timerType, \" Timer\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Total Focus Unit : \", count, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary btn-lg\",\n      onClick: toggleTimer,\n      children: isActive ? 'Pause' : 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Stopwatch, \"WPoXXYAkhUb8JcSLilsvFztWriw=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Stopwatch","_s","seconds","setSeconds","isActive","setIsActive","timerType","setTimerType","count","setCount","fetchData","response","get","process","env","REACT_APP_GET_COUNT_API","data","prevSeconds","error","console","interval","setInterval","clearInterval","handleCompletion","prevCount","prevType","formatTime","time","minutes","Math","floor","remainingSeconds","String","padStart","toggleTimer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/amritanandsinghgmail.com/Desktop/GitHub/Paradoma Tracker/frontend/src/components/stopwatch.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Stopwatch = () => {\n  const [seconds, setSeconds] = useState(1500); // Initial time for focus (25 minutes in seconds)\n  const [isActive, setIsActive] = useState(false);\n  const [timerType, setTimerType] = useState('Focus');\n  const [count, setCount] = useState(); // Variable to count completed cycles\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(process.env.REACT_APP_GET_COUNT_API);\n      setCount(response.data.data.count);\n\n      // Assuming you want to initialize the timer based on the fetched count\n      setSeconds((prevSeconds) => (timerType === 'Focus' ? 300 : 1500));\n    } catch (error) {\n      console.error('Error fetching initial data:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Call fetchData once when the component mounts\n    fetchData();\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  useEffect(() => {\n    let interval;\n\n    if (isActive && seconds > 0) {\n      interval = setInterval(() => {\n        setSeconds((prevSeconds) => prevSeconds - 1);\n      }, 1000);\n    } else if (seconds === 0) {\n      clearInterval(interval);\n      handleCompletion();\n    }\n\n    return () => clearInterval(interval);\n  }, [isActive, seconds, timerType]);\n\n  useEffect(() => {\n    if (count > 0) {\n      fetchData();\n    }\n  }, [count]);\n\n  const handleCompletion = () => {\n    setIsActive(false);\n    setCount((prevCount) => prevCount + 1);\n\n    // Toggle between Focus and Break\n    setTimerType((prevType) => (prevType === 'Focus' ? 'Break' : 'Focus'));\n\n    // Set the next timer duration based on the type\n    setSeconds((prevSeconds) => (timerType === 'Focus' ? 300 : 1500));\n  };\n\n  const formatTime = (time) => {\n    const minutes = Math.floor(time / 60);\n    const remainingSeconds = time % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n  };\n\n  const toggleTimer = () => {\n    setIsActive(!isActive);\n  };\n\n  return (\n    <div className=\"container text-center mt-5\">\n      <h1 className=\"display-4\">Stopwatch</h1>\n      <p className=\"display-2\">{formatTime(seconds)}</p>\n      <p>{timerType} Timer</p>\n      <div>\n        <h5>Total Focus Unit : {count} </h5>\n      </div>\n      <button className=\"btn btn-primary btn-lg\" onClick={toggleTimer}>\n        {isActive ? 'Pause' : 'Start'}\n      </button>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}